

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name);
	void Prepare(); 
	
	void set_GlobalData(string@name,string@value);          
	
	string@get_GlobalData(string@name);            
	
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
} 

shared class GlobalData
{
	uint Hash;
	string Value;
	
	GlobalData(string@name)
	{
		Hash=GetStrHash(name);
		Value="";
	} 
	
	void SaveData(uint[]&outArray,uint&position)
	{
		uint len=Value.length();
		
		outArray.resize(position+2+len/2);
		
		outArray[position++]=Hash;
		outArray[position++]=len;
		
		for(uint i=0;i<len;i++)
		{
			outArray[position]|=Value[i++]<<24;
			outArray[position]|=Value[i++]<<16;
			outArray[position]|=Value[i++]<<8;
			outArray[position++]|=Value[i];
		}
	} 
	
	void LoadData(uint[]&in outArray,uint&position)
	{
		Hash=outArray[position++];
		uint len=outArray[position++];
		Value.resize(len);
		
		for(uint i=0;i<len;i++)
		{
			Value[i++]=(outArray[position]>>24)&0xFF;
			Value[i++]=(outArray[position]>>16)&0xFF;
			Value[i++]=(outArray[position]>>8)&0xFF;
			Value[i]=outArray[position++]&0xFF;
			
		}
	}
} 

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}
	
	Hexagonal(const Critter&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Item&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Scenery&master){Set(master.HexX,master.HexY);}
	
	bool Entire(Map&map,int entNum){return map.GetEntireCoords(entNum,0,X,Y);}
	bool IsPassed(Map&map){return ValidPosition(map)&&map.IsHexPassed(X,Y);}
	bool IsPassed(Map&map,Hexagonal&begin,Hexagonal&end){return ValidPosition(map,begin,end)&&map.IsHexPassed(X,Y);}
	
	bool ValidPosition(Map&map)
	{
		Hexagonal end,begin;
		if(end.Entire(map,0)&&begin.Entire(map,255))
		return ValidPosition(map,begin,end);
		return false;
	}
	
	bool ValidPosition(Map&map,Hexagonal&begin,Hexagonal&end)
	{
		return(X>=begin.X&&Y>=begin.Y
		&&X<=end.X&&Y<=end.Y);
	}
	
	bool Transit(Critter&critter,Map&map){return Transit(critter,map,critter.Dir);}
	bool Transit(Critter&critter,Map&map,uint8 direction)
	{
		if(!IsPassed(map))return false;
		return critter.TransitToMap(map.Id,X,Y,direction);
	}
	
	bool Transit(Critter&critter,uint mapId){return Transit(critter,mapId,critter.Dir);}
	bool Transit(Critter&critter,uint mapId,uint8 direction)
	{
		if(mapId==0)return false;
		Map@map=GetMap(mapId);
		if(@map is null)return false;
		return Transit(critter,map,direction);
	} 
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}    

shared class MapHash
{
	MapHash(const uint16&in protoId)
	{
		ProtoId=protoId;
		@Min=null;
		@Max=null;
	}
	
	MapHash&opAssign(Map&map)
	{
		@Min=Hexagonal(0,0);
		@Max=Hexagonal(0,0);
		map.GetEntireCoords(0,0,Max.X,Max.Y);
		map.GetEntireCoords((255),0,Min.X,Min.Y);
		return this;
	}
	
	uint16 ProtoId;
	Hexagonal@Min;
	Hexagonal@Max;
} 

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	} 
	
	Line(Map&map,uint16 grid,MapHash@hash)
	{
		if(@hash is null)
		{
			Hexagonal min,max;
			map.GetTransferParams(min.X,min.Y,max.X,max.Y,grid);
			
			@A=@Hexagonal(min.X,min.Y);
			@B=@Hexagonal(max.X,max.Y);
		}
		else
		{
			if(@hash.Min is null||@hash.Max is null)
			map.GetTransferParams(hash.Min.X,hash.Min.Y,hash.Max.X,hash.Max.Y,grid);
			
			@A=@Hexagonal(hash.Min.X,hash.Min.Y);
			@B=@Hexagonal(hash.Max.X,hash.Max.Y);
		}
	} 
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}  

import MapHash@GetMapHash(const uint16&in pid)from"world";
import uint CreateLocation(Hexagonal&coordinate,uint16 locationPid)from"world"; 

import ManagerObject@get_objectManager()from"world";                                                                                                                   

import bool IsHuman(Critter&cr)from"races";
import bool IsMutant(Critter&cr)from"races";
import bool IsGhoul(Critter&cr)from"races";
import void ApplyGhoul(Critter&cr)from"morphes";           

const int[]RadiationEffects=
{
	1,100,200,400,600,1000,
	(0),0,0,0,2,4,6,
	(1),0,0,1,0,3,5,
	(2),0,0,0,1,3,5,
	(3),0,0,0,0,3,5,
	(4),0,0,0,0,1,3,
	(5),0,0,1,2,5,6,
	(72),0,1,3,5,15,20,
	(13),0,0,0,5,10,10,
};      

void AffectRadiation(Critter&cr,int value)
{
	int body=cr.Stat[(112)];
	if(cr.IsDead())
	return;
	
	if(cr.Stat[(67)]==(10)||cr.Stat[(67)]==(16))
	return;
	
	if(IsGhoul(cr)||IsMutant(cr))
	return; 
	
	uint[]indexes;
	uint[]rates;
	bool isActive=cr.GetTimeEvents((2),indexes,null,rates)!=0;
	int levelVal=cr.Stat[(74)];
	int resistVal=cr.Stat[(30)];
	
	if(value>=0)
	value-=value*resistVal/100;
	cr.StatBase[(74)]=(((levelVal+value)>(2000))?(2000):(((levelVal+value)<(0))?(0):(levelVal+value)));
	levelVal=cr.Stat[(74)];
	
	if(cr.Stat[(74)]>450&&(body==0||body==(11)||body==(106)))
	{
		int crType=cr.CrType;
		cr.StatBase[(112)]=(8);
		if(crType==(107))
		crType=(117);
		else if(crType==(108))
		crType=(118);
		else if(crType==(109))
		crType=(119);
		else if(crType==(12))
		crType=(117);
		else if(crType==(13))
		crType=(118);
		else if(crType==(14))
		crType=(119);
		cr.ChangeCrType(crType);
	}
	
	if(value>(66))
	cr.SayMsg((11),(3),(12807));
	
	if(levelVal>=(66))
	{
		if(cr.Damage[(501)]==0)
		cr.DamageBase[(501)]=1;
	}
	else
	{
		if(cr.Damage[(501)]!=0)
		cr.DamageBase[(501)]=0;
	}
	
	if(isActive)
	{
		uint stage=rates[0];
		uint newStage=GetRadiationStage(levelVal);
		if(stage!=newStage)
		cr.ChangeTimeEvent(indexes[0],0,stage);
	}
	else
	{
		int stage1Val=RadiationEffects[(1)-1];
		if(levelVal>=stage1Val)
		cr.AddTimeEvent("cte_Radiation",0,(2));
	}
	
	if(levelVal>=(1800))
	{
		cr.ToDead((116),null);
		cr.SayMsg((11),(3),(12806));
	}
}

void DropRadiation(Critter&cr)
{
	bool isActive=cr.GetTimeEvents((2),null,null,null)!=0;
	if(isActive)
	{
		uint stage=GetRadiationStage(cr.Stat[(74)]);
		ChangeStage(cr,stage,false);
		cr.EraseTimeEvents((2));
	}
	cr.StatBase[(74)]=0;
	if(cr.Damage[(501)]!=0)
	cr.DamageBase[(501)]=0;
}

uint cte_Radiation(Critter&cr,int identifier,uint&stage)
{
	int body=cr.Stat[(112)];
	if(cr.IsDead())
	return((5)*__TimeMultiplier*60);
	if(cr.Stat[(74)]>450&&(body==0||body==(11)||body==(106)))
	{
		int crType=cr.CrType;
		cr.StatBase[(112)]=(8);
		if(crType==(107))
		crType=(117);
		else if(crType==(108))
		crType=(118);
		else if(crType==(109))
		crType=(119);
		else if(crType==(12))
		crType=(117);
		else if(crType==(13))
		crType=(118);
		else if(crType==(14))
		crType=(119);
		cr.ChangeCrType(crType);
	}
	if(cr.Stat[(74)]>800&&cr.Stat[(74)]<1000&&IsHuman(cr))
	{
		if((cr.Stat[(183)]!=0||Random(0,100)>40)||Random(0,100)>80)
		{
			ApplyGhoul(cr);
			return 0;
		}
	}
	
	uint newStage=GetRadiationStage(cr.Stat[(74)]);
	uint duration=(10080*60);
	
	if(stage!=newStage)
	{
		ChangeStage(cr,stage,false);
		ChangeStage(cr,newStage,true);
		stage=newStage;
	}
	else
	{
		ChangeStage(cr,stage,false);
		duration=0;
	}
	return duration;
}

uint GetRadiationStage(int level)
{
	for(uint i=0,j=(6);i<=j;i++)
	{
		int valMin=(i>0?RadiationEffects[(i)-1]:0);
		int valMax=(i<j?RadiationEffects[(i+1)-1]:level+1);
		if(level>=valMin&&level<valMax)
		return i;
	}
	return 0;
}

void ChangeStage(Critter&cr,uint stage,bool gain)
{
	if(stage==0)
	return;
	if(gain)
	cr.SayMsg((11),(3),(12799+(stage)));
	
	for(uint i=0,j=(8);i<j;i++)
	{
		uint statIndex=RadiationEffects[6+(i)*7];
		int statAmount=RadiationEffects[6+(i)*7+(stage)];
		
		if(statAmount!=0)
		{
			int curVal=cr.Stat[statIndex];
			
			if(gain)
			{
				statAmount=-statAmount;
				if(statIndex<(32))
				cr.StatBase[(32)+statIndex]+=statAmount;
				else if(statIndex==(72))
				{
					cr.StatBase[(72)]+=statAmount;
					if(cr.Stat[(72)]<=0)
					cr.ToDead((116),null);
				}
			}
			else
			{
				if(statIndex<(32))
				cr.StatBase[(32)+statIndex]+=statAmount;
			}    
			
		}
	}
}                                              

